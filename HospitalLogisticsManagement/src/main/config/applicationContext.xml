<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/task 
    http://www.springframework.org/schema/task/spring-task.xsd">


	<bean id="initPro" class="com.sj.common.init.InitPro">
		<property name="parameterManager" ref="parameterManager"></property>
	</bean>
	<bean id="interceptor" class="com.sj.common.filter.Interceptor">
		<property name="menuManager" ref="menuManager"></property>
	</bean>
	<bean id="getParameret" class="com.sj.common.utils.GetParameret">
		<property name="parameterManager" ref="parameterManager"></property>
	</bean>
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />


	<!-- 读取文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>/WEB-INF/db.config.properties</value>
		</property>
		<property name="fileEncoding" value="utf-8" />
	</bean>
	<!-- C3P0 连接池数据库配置 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close"> <property name="driverClass" value="${db.driver}"/> 
		<property name="jdbcUrl" value="${db.url}"/> <property name="user" value="${db.username}"/> 
		<property name="password" value="${db.password}"/> <property name="maxPoolSize" 
		value="${db.maxPoolSize}"/> <property name="minPoolSize" value="${db.minPoolSize}"/> 
		<property name="initialPoolSize" value="${db.initialPoolSize}"/> <property 
		name="maxIdleTime" value="${db.maxIdleTime}"/> <property name="acquireIncrement"><value>2</value></property> 
		<property name="maxStatements"><value>0</value></property> <property name="idleConnectionTestPeriod"><value>1800</value></property> 
		<property name="acquireRetryAttempts"><value>30</value></property> <property 
		name="breakAfterAcquireFailure"><value>true</value></property> <property 
		name="testConnectionOnCheckout"><value>false</value></property> </bean> -->
	<!-- Spring 连接池数据库配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db.driver}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="minPoolSize" value="5"/>  
		<property name="maxPoolSize" value="500"/> 
		<property name="initialPoolSize" value="10"/>  
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default:0-->
		<property name="maxIdleTime" value="300"/>  
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3-->
		<property name="acquireIncrement" value="3"/>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
		<property name="acquireRetryAttempts" value="60"/>
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 --> 
		<property name="acquireRetryDelay" value="2000"/>
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false --> 
		<property name="autoCommitOnClose">
     			<value>false</value>  
		</property> 
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		lazy-init="false">
		<!-- 配置数据源属性 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置hibernate 的基本属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.sj.common.entity</value>
				<value>com.sj.privilegemanagement.entity</value>
			</list>
		</property>
		<!-- <property name="configLocations"> <list> <value> classpath*:hibernate.cfg.xml 
			</value> </list> </property> -->
		<!-- <property name="mappingLocations" value="com.sj.*.entity.*"></property> -->
	</bean>

	<!-- >>>配置事务管理器<<< -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<!-- HibernateTransactionManager bean需要依赖注入一个SessionFactory bean的引用 -->
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	<!-- 下面使用aop切面的方式来实现 -->
	<tx:advice id="TestAdvice" transaction-manager="transactionManager">
		<!--配置事务传播性，隔离级别以及超时回滚等问题 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!--配置事务切点 -->
		<aop:pointcut id="services" expression="execution(* com.sj.*.manager.*.*(..))" />
		<aop:advisor pointcut-ref="services" advice-ref="TestAdvice" />
	</aop:config>
	<!-- <context:component-scan base-package="com.sj.privilegemanagement.action.ProposerAction"></context:component-scan> 
		<aop:aspectj-autoproxy proxy-target-class="true" /> <context:annotation-config 
		/>  -->
	<!-- 在applicationContext.xml中进行配置，使用定时器 ref : pojo类的名称 method : 调用的方式名称 
		cron : cronExpression表达式 cron="0/5 * * * * ?" //表示五秒钟执行一次 -->
	<!-- <task:scheduled-tasks> <task:scheduled ref="proposerAction" method="findByStandard" 
		cron="0/5 * * * * ?"/> </task:scheduled-tasks>  -->
	<!-- ***********定时器**************** -->
	<bean id="scheduledJob" class="com.sj.common.manager.impl.CustomScheduledJob">
		<property name="schedulerFactory" value="scheduledJobFactory" />
		<property name="triggerKey" value="scheduledTrigger" />
		<property name="proposerAction" ref="proposerAction"></property>
	</bean>

	<bean id="scheduledJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="scheduledJob" />
		<property name="targetMethod" value="doScheduledJob" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="scheduledTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="scheduledJobDetail" />
		<property name="cronExpression">
			<value>0/30 * * * * ?</value>
		</property>
	</bean>

	<!-- Add scheduled job to project -->
	<bean id="scheduledJobFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="scheduledTrigger" />
			</list>
		</property>
	</bean>

</beans>  